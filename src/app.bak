import { FunctionComponent, useEffect, useRef } from "react";
import { UncontrolledReactSVGPanZoom } from "react-svg-pan-zoom";

type ColorVariant = {
  [key: string]: string;
};

// Render an SVG circle for each subway station

const SubwayMap: FunctionComponent = () => {
  const Viewer = useRef<UncontrolledReactSVGPanZoom>(null);

  const colorVariants: ColorVariant = {
    "light-green": "stroke-light-green",
    "dark-green": "stroke-dark-green",
  };

  // const handleClick: Function =
  //   (name: string, status: Status) => (event: Event) => {
  //     event.preventDefault();
  //     if (status !== Status.CLOSE && status !== Status.CONSTRUCTION) {
  //     }
  //   };

  useEffect(() => {
    if (Viewer.current != null) {
      Viewer.current?.fitToViewer();
    }
  }, []);

  return (
    <UncontrolledReactSVGPanZoom
      ref={Viewer}
      width={500}
      height={500}
      detectAutoPan={false}
      className="mx-auto my-0 mt-4"
    >
      <svg height={1200} width={1200} className="my-0 mx-auto">
        {Lines.map((line) => (
          <g key={line.no}>
            {line.stations.map((station, idx) => {
              return (
                <Fragment key={station.id}>
                  {idx < line.stations.length - 1 && (
                    <line
                      x1={station.location.x}
                      y1={station.location.y}
                      x2={line.stations[idx + 1].location.x}
                      y2={line.stations[idx + 1].location.y}
                      className={`${colorVariants[line.code]} stroke-[4px]`}
                    />
                  )}
                  {/* rome-ignore lint/a11y/useKeyWithClickEvents: <explanation> */}
                  <circle
                    cx={station.location.x}
                    cy={station.location.y}
                    r={10}
                    className={`cursor-pointer fill-white ${
                      colorVariants[line.code]
                    } stroke-[2px] hover:stroke-black ${
                      station.status === Status.CONSTRUCTION ||
                      station.status === Status.CLOSE
                        ? "opacity-50 cursor-not-allowed"
                        : ""
                    }`}
                    onClick={handleClick(station.name.th, station.status)}
                  />
                  <foreignObject
                    x={station.location.x - 35}
                    y={station.location.y + 15}
                    width="80"
                    height="40"
                  >
                    <div
                      style={{
                        fontSize: 8,
                        fontFamily: "Arial",
                        textAlign: "center",
                      }}
                    >
                      <div style={{ lineHeight: "1em" }}>{station.name.en}</div>
                    </div>
                  </foreignObject>
                </Fragment>
              );
            })}
          </g>
        ))}
      </svg>
    </UncontrolledReactSVGPanZoom>
  );
};

const App: FunctionComponent = () => {
  return <SubwayMap />;
};

export default App;
