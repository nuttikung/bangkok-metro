import Drawer from "@mui/material/Drawer";
import Grid from "@mui/material/Grid";
import InputBase from "@mui/material/InputBase";
import React, {
  FunctionComponent,
  useContext,
  useEffect,
  useState,
} from "react";
import Select from "react-select";
import { SwipeEventData, useSwipeable } from "react-swipeable";
import Graph from "../api/graph";
import { SearchContext } from "../contexts";
import { Section, Station, routes, stations } from "../data";
import { getJourney, useLess } from "../utils/Routing";

// import { UncontrolledReactSVGPanZoom } from "react-svg-pan-zoom";
// type JourneyType = "drive" | "transfer";
type StationOption = {
  value: number;
  label: string;
};

// Memoization Later
const options: StationOption[] = stations.map((station) => ({
  value: station.id,
  label: `${station.code} ${station.name.th} (${station.line})`,
}));

const SubwayMain: FunctionComponent = () => {
  const { search, setSearch } = useContext(SearchContext);
  console.log("ðŸš€ ~ file: App.tsx:32 ~ search:", search);

  const [selectedOptionFrom, setSelectedOptionFrom] =
    useState<StationOption | null>(null);
  const [selectedOptionTo, setSelectedOptionTo] =
    useState<StationOption | null>(null);

  const [isExpanded, setIsExpanded] = useState<boolean>(false);

  const [possibleRoutes, setPossibleRoutes] = useState<Section[] | []>([]);
  console.log("ðŸš€ ~ file: App.tsx:130 ~ possibleRoutes:", possibleRoutes);

  const [activeRoute, setActiveRoute] = useState<number>(0);

  // COMMENT: Initialize Graph
  useEffect(() => {
    Graph.initialize();
  }, []);

  useEffect(() => {
    // TODO: re-calculate since some state change
    const finsAllPath = async () => {
      if (selectedOptionFrom !== null && selectedOptionTo !== null) {
        const totalPaths = await Graph.visit(selectedOptionTo.value, [
          selectedOptionFrom.value,
        ]);
        // à¹€à¸­à¸² A à¹„à¸›à¸«à¸² Route + Station
        const section: Section[] = totalPaths
          .filter(useLess)
          .map((route) => {
            const pathStations: Station[] = [];
            let totalDuration = 0;
            route.forEach((stationIds, index, selfArray) => {
              const station = stations.find(
                (record) => record.id === stationIds
              );
              if (station != undefined) {
                pathStations.push(station);
              }
              if (index !== selfArray.length - 1) {
                let non_reverse = routes.find(
                  (record) =>
                    record.id_from === stationIds &&
                    record.id_to === route[index + 1]
                );
                let reverse = routes.find(
                  (record) =>
                    record.id_from === route[index + 1] &&
                    record.id_to === stationIds
                );
                if (non_reverse !== undefined) {
                  totalDuration += non_reverse.delay;
                }
                if (reverse !== undefined) {
                  totalDuration += reverse.delay;
                }
              }
            });
            return {
              journey: getJourney(pathStations),
              duration: totalDuration,
            };
          })
          .sort((current, next) => current.duration - next.duration);
        setPossibleRoutes(section);
        // console.log("ðŸš€ ~ file: App.tsx:188 ~ finsAllPath ~ section:", section);
        if (section.length > 0) {
          setActiveRoute(1);
        }
      }
    };

    finsAllPath();
  }, [selectedOptionFrom, selectedOptionTo]);

  // const Viewer = useRef<UncontrolledReactSVGPanZoom>(null);

  const handleFormSubmit = (event: React.SyntheticEvent): void => {
    event.preventDefault();
  };

  const handleFromSelect = (newValue: StationOption | null): void => {
    if (newValue?.value === selectedOptionTo?.value && newValue !== null) {
      setSelectedOptionTo(selectedOptionFrom);
      setSelectedOptionFrom(newValue);
    } else {
      setSelectedOptionFrom(newValue);
    }
  };

  const handleToSelect = (newValue: StationOption | null): void => {
    if (newValue?.value === selectedOptionFrom?.value && newValue !== null) {
      setSelectedOptionFrom(selectedOptionTo);
      setSelectedOptionTo(newValue);
    } else {
      setSelectedOptionTo(newValue);
    }
  };

  const handleSwiped = (eventData: SwipeEventData) => {
    if (eventData.dir === "Up") {
      setIsExpanded(true);
    }
    if (eventData.dir === "Down") {
      setIsExpanded(false);
    }
  };

  const handlers = useSwipeable({
    onSwiped: handleSwiped,
    onTap: (evnt) => console.log(evnt),
    onTouchStartOrOnMouseDown: ({ event }) => event.preventDefault(),
    touchEventOptions: { passive: false },
    preventScrollOnSwipe: true,
    trackMouse: true,
    // trackTouch: false,
  });

  // const handleClick: Function =
  //   (name: string, status: Status) => (event: Event) => {
  //     event.preventDefault();
  //     if (status !== Status.CLOSE && status !== Status.CONSTRUCTION) {
  //       console.log("ðŸš€ ~ file: App.tsx:9 ~ handleClick ~ name:", name);
  //     }
  //   };

  // useEffect(() => {
  //   if (Viewer.current != null) {
  //     Viewer.current?.fitToViewer();
  //   }
  // }, []);

  return (
    <div className="container mx-auto">
      <Drawer
        // PaperProps={{
        //   className: isExpanded
        //     ? "fixed p-4 bottom-0 rounded-t-3xl h-[70vh] transition-[height] ease-in duration-150"
        //     : "fixed p-4 bottom-0 rounded-t-3xl h-[10vh] transition-[height] ease-in duration-150",
        // }}
        // className={
        //   isExpanded
        //     ? "fixed p-4 bottom-0 rounded-t-3xl h-[70vh] transition-[height] ease-in duration-150"
        //     : "fixed p-4 bottom-0 rounded-t-3xl h-[10vh] transition-[height] ease-in duration-150"
        // }
        hideBackdrop
        anchor="bottom"
        open={true}
        variant="persistent"
        onClose={() => {}}
        // {...handlers}
      >
        <Grid
          container
          spacing={2}
          component="form"
          noValidate
          onSubmit={handleFormSubmit}
        >
          <Grid item xs={6}>
            <InputBase
              sx={{ ml: 1, flex: 1 }}
              placeholder="Search Google Maps"
              inputProps={{ "aria-label": "search google maps" }}
            />
            <Select
              className="block"
              name="from"
              placeholder="FROM"
              menuPlacement="bottom"
              defaultValue={null}
              isDisabled={false}
              isLoading={false}
              isClearable={true}
              isSearchable={true}
              options={options}
              onChange={handleFromSelect}
              value={selectedOptionFrom}
            />
          </Grid>
          <Grid item xs={6}>
            <Select
              className="block"
              name="to"
              placeholder="TO"
              menuPlacement="bottom"
              defaultValue={null}
              isDisabled={false}
              isLoading={false}
              isClearable={true}
              isSearchable={true}
              options={options}
              onChange={handleToSelect}
              value={selectedOptionTo}
            />
          </Grid>
        </Grid>
      </Drawer>
      {possibleRoutes.map((section, index) => {
        const duration = section.duration / 60;
        if (index == 0) {
        } else {
          return null;
        }
      })}
    </div>
  );

  // return (
  //   <UncontrolledReactSVGPanZoom
  //     ref={Viewer}
  //     width={500}
  //     height={500}
  //     detectAutoPan={false}
  //     className="mx-auto my-0 mt-4"
  //     // onClick={event => console.log('click', event.x, event.y, event.originalEvent)}
  //   >
  //     <svg height={1200} width={1200} className="my-0 mx-auto">
  //       {subwayLines.map((line) => {
  //         const stations = line.stations.map((stationId, i) => {
  //           return (
  //             <>
  //               {getCircleForStation(stationId)}
  //               {i < line.stations.length - 1
  //                 ? getLineForRoute(
  //                     routes.find(
  //                       (route) =>
  //                         route.id_from === stationId &&
  //                         route.id_to === line.stations[i + 1]
  //                     )
  //                   )
  //                 : null}
  //             </>
  //           );
  //         });
  //         return <g key={line.id}>{stations}</g>;
  //       })}
  //     </svg>
  //   </UncontrolledReactSVGPanZoom>
  // );
};

export default SubwayMain;
